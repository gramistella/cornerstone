use std::fs::{self};
use std::path::Path;

fn main() {
    println!("cargo:rerun-if-changed=../frontend");

    let wasm_bindgen_out = "../frontend/static/wasm-pack"; // Replace with the actual wasm-bindgen output directory

    // Ensure the destination directory exists
    let static_dir = Path::new("../backend/static/wasm");
    if !static_dir.exists() {
        fs::create_dir_all(static_dir).expect("Failed to create /backend/static/wasm directory");
    }

    // Copy all generated files from wasm-bindgen output
    copy_generated_files(wasm_bindgen_out, static_dir);

    println!("cargo:warning=Copied all generated WASM-pack files to /backend/static/wasm/");
}


/// Copy all files generated by wasm-bindgen to the destination directory
fn copy_generated_files(source_dir: &str, dest_dir: &Path) {
    let source_path = Path::new(source_dir);
    
    // Add check for source directory
    if !source_path.exists() {
        fs::create_dir_all(source_path).expect("Failed to create wasm-bindgen output directory");
        println!("cargo:warning=Created wasm-bindgen output directory");
        return; // Exit early as there's nothing to copy yet
    }

    // Files to ignore
    let ignored_files = [".gitignore", "package.json"];

    for entry in source_path
        .read_dir()
        .expect("Failed to read wasm-bindgen output directory")
    {
        let entry = entry.expect("Failed to get entry in wasm-bindgen output directory");
        let source_file = entry.path();
        if source_file.is_file() {
            // Skip ignored files
            if let Some(filename) = source_file.file_name() {
                if let Some(filename_str) = filename.to_str() {
                    if ignored_files.contains(&filename_str) {
                        continue;
                    }
                }
            }
            
            let dest_file = dest_dir.join(
                source_file
                    .file_name()
                    .expect("Failed to get file name from source"),
            );
            fs::copy(&source_file, &dest_file).expect("Failed to copy file");
        }
    }
}
