use common::{ContactDto, Credentials, LoginResponse};
use dprint_plugin_typescript::configuration::ConfigurationBuilder;
use dprint_plugin_typescript::{format_text, FormatTextOptions};
use std::fs;
use std::path::{Path, PathBuf};
use ts_rs::TS;

fn main() {
    println!("ğŸ“¦ Generating TypeScript type definitions...");

    // 1. Collect all the unformatted TypeScript type definitions
    let types_to_export = [
        ContactDto::export_to_string().unwrap(),
        Credentials::export_to_string().unwrap(),
        LoginResponse::export_to_string().unwrap(),
    ];

    // 2. Join them, and clean up the duplicate "generated by" comments
    let raw_ts = remove_duplicate_comments(&types_to_export.join("\n\n"));

    // 3. Format the combined TypeScript string using the correct API
    let formatted_ts = format_typescript(&raw_ts);

    // 4. Define the output path
    let out_path = Path::new("frontend_svelte/src/lib/types.ts");

    // 5. Write the final, formatted content to the file
    if let Some(parent) = out_path.parent() {
        fs::create_dir_all(parent).expect("Failed to create parent directory");
    }
    fs::write(out_path, formatted_ts).expect("Failed to write TypeScript file");

    println!(
        "âœ… TypeScript definitions successfully generated and formatted at: {}",
        out_path.display()
    );
}

/// Formats a string containing TypeScript code using dprint.
fn format_typescript(content: &str) -> String {
    let config = ConfigurationBuilder::new().build();

    // Correctly call `format_text` by passing the `FormatTextOptions` struct
    // with all required fields explicitly provided.
    let result = format_text(FormatTextOptions {
        path: &PathBuf::from("_.ts"), // Virtual path to hint the file type
        extension: None,              // Added: The extension can be inferred from the path
        text: content.to_string(),    // Note: The field expects a `String`
        config: &config,
        external_formatter: None, // Added: We are not using an external formatter
    });

    match result {
        Ok(Some(formatted_text)) => formatted_text,
        Ok(None) => content.to_string(), // dprint returns None if no changes were made
        Err(e) => {
            // If formatting fails, log the error and return the unformatted text
            eprintln!("Error formatting TypeScript: {e}");
            content.to_string()
        }
    }
}

/// A helper to remove the redundant "Generated by ts-rs" comments from combined files.
fn remove_duplicate_comments(content: &str) -> String {
    let mut lines: Vec<&str> = content.lines().collect();
    let mut header_found = false;

    lines.retain(|line| {
        let is_header_comment = line.trim().starts_with("// This file was generated by");
        if is_header_comment {
            if !header_found {
                header_found = true;
                return true; // Keep the first header
            }
            return false; // Discard subsequent headers
        }
        true // Keep all other lines
    });

    lines.join("\n") + "\n"
}
