name: Rust CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Config.toml'
      - '.env'
      - '.pre-commit-config.yaml'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Config.toml'
      - '.env'
      - '.pre-commit-config.yaml'

env:
  CARGO_TERM_COLOR: always
  # This is a safe, non-production secret for CI purposes
  APP_JWT_SECRET: "ci-test-secret-that-is-at-least-32-bytes-long"
  # Point to a temporary db file for the CI environment
  DATABASE_URL: "sqlite:test_ci.db"

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install just
        run: cargo install just

      - name: Install sqlx-cli
        run: cargo install sqlx-cli --no-default-features --features native-tls,sqlite

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Create Database File for CI
        run: touch test_ci.db

      - name: Run database migrations
        run: just db-migrate

      - name: Lint code
        run: just lint

      - name: Check code formatting
        run: cargo fmt --all --check

      - name: Run backend tests
        # The test itself creates an in-memory db, but db-migrate
        # also checks that the migration files are valid SQL.
        run: just test-backend

      - name: Build all packages (Release mode)
        # This is a good final check to ensure everything compiles in release mode
        run: cargo build --workspace --release
