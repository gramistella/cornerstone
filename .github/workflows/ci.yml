name: Rust CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Config.toml'
      - '.env'
      - '.pre-commit-config.yaml'
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'Config.toml'
      - '.env'
      - '.pre-commit-config.yaml'

env:
  CARGO_TERM_COLOR: always
  APP_JWT_SECRET: "ci-test-secret-that-is-at-least-32-bytes-long"

jobs:
  check-format:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
      - name: Check code formatting
        run: cargo fmt --all --check

  test:
    name: Test (${{ matrix.db.name }})
    runs-on: ubuntu-latest
    needs: check-format # Run after formatting check passes
    strategy:
      fail-fast: false
      matrix:
        db:
          - name: SQLite
            type: sqlite
            sqlx_features: native-tls,sqlite
            url: "sqlite:test_ci.db"
          - name: PostgreSQL
            type: postgres
            sqlx_features: native-tls,postgres
            url: "postgres://postgres:password@localhost:5432/testdb"

    # The service is defined for the entire job. It will be spun up
    # for all matrix configurations but only used by the PostgreSQL test.
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Set the DATABASE_URL for sqlx-cli and the application tests
      DATABASE_URL: ${{ matrix.db.url }}
      # This is for the .env.example fallback
      DATABASE_URL_SQLITE: "sqlite:test_ci.db"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable

      - name: Install just
        run: cargo install just

      - name: Install sqlx-cli for ${{ matrix.db.name }}
        run: cargo install sqlx-cli --no-default-features --features ${{ matrix.db.sqlx_features }}

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ matrix.db.type }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Create SQLite Database File
        if: matrix.db.type == 'sqlite'
        run: touch test_ci.db

      - name: Run Database Migrations
        run: just db-migrate-${{ matrix.db.type }}

      - name: Lint code
        run: just lint-${{ matrix.db.type }}

      - name: Run backend tests (${{ matrix.db.name }})
        run: just test-backend-${{ matrix.db.type }}

      - name: Build (Release mode)
        run: cargo build --workspace --release --no-default-features --features "db-${{ matrix.db.type }},svelte-ui"
